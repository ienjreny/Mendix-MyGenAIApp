// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package openaiconnector.actions;

import static java.util.Objects.requireNonNull;
import java.util.Iterator;
import java.util.Map;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.UserAction;
import openaiconnector.impl.MxLogger;

public class Response_SetToolArguments extends UserAction<java.lang.String>
{
	private final java.lang.String Response_JSON;

	public Response_SetToolArguments(
		IContext context,
		java.lang.String _response_JSON
	)
	{
		super(context);
		this.Response_JSON = _response_JSON;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {
			requireNonNull(Response_JSON, "Response_JSON is required.");
			rootNode = MAPPER.readTree(Response_JSON);
			setToolCallArguments();
			
			return MAPPER.writeValueAsString(rootNode);
			
		} catch (Exception e) {
			LOGGER.error(e);
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Response_SetToolArguments";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(Response_SetToolArguments.class);
	private static final ObjectMapper MAPPER = new ObjectMapper();
	private JsonNode rootNode;
	
	
	private void setToolCallArguments() throws Exception {
		JsonNode choices = rootNode.path("choices");
		for(JsonNode choice : choices) {
			JsonNode message = choice.path("message");
			JsonNode toolCalls = message.path("tool_calls");
			if(toolCalls == null || toolCalls.isEmpty()) {
				return;
			}
			for(JsonNode toolCall : toolCalls) {
				JsonNode function = toolCall.path("function");
				String argumentsString = function.path("arguments").asText();
				if(!argumentsString.isBlank()) {
					JsonNode arguments = MAPPER.readTree(argumentsString);
					// Create an array node to hold the key-value pairs
			        ArrayNode argumentsArray = MAPPER.createArrayNode();
			        // Iterate over the fields of the arguments node
			        Iterator<Map.Entry<String, JsonNode>> fields = arguments.properties().iterator();
			        while (fields.hasNext()) {
			            Map.Entry<String, JsonNode> field = fields.next();

			            // Create an object node for each key-value pair
			            ObjectNode keyValueNode = MAPPER.createObjectNode();
			            keyValueNode.put("key", field.getKey());
			            keyValueNode.set("value", field.getValue());

			            // Add the key-value node to the array
			            argumentsArray.add(keyValueNode);
			        }
			        ((ObjectNode) function).set("arguments", argumentsArray);
					((ObjectNode) toolCall).set("function", function);
				}
			}
			((ObjectNode) message).set("tool_calls", toolCalls);
		}
		((ObjectNode) rootNode).set("choices", choices);
	}
	// END EXTRA CODE
}
