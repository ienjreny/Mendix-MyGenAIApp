// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package agentcommons.actions;

import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IDataType;
import agentcommons.impl.MxLogger;
import agentcommons.proxies.Microflow;
import agentcommons.proxies.Module;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.UserAction;

public class Microflow_GetList extends UserAction<java.util.List<IMendixObject>>
{
	/** @deprecated use MicroflowSelection.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __MicroflowSelection;
	private final agentcommons.proxies.MicroflowSelection MicroflowSelection;

	public Microflow_GetList(
		IContext context,
		IMendixObject _microflowSelection
	)
	{
		super(context);
		this.__MicroflowSelection = _microflowSelection;
		this.MicroflowSelection = _microflowSelection == null ? null : agentcommons.proxies.MicroflowSelection.initialize(getContext(), _microflowSelection);
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {
			List<IMendixObject> modelMicroflowList = Core.getMicroflowNames().stream()
				.filter(microflowName -> !microflowName.isBlank() && microflowName.contains("."))
				.filter(microflow -> Core.getReturnType(microflow).getType().equals(IDataType.DataTypeEnum.String))
				.sorted()
				.map(microflowName -> {
					Microflow microflowImport = new Microflow(getContext());
		        	String[] parts = microflowName.split("\\.", 2);
		        	microflowImport.setFullName(microflowName);
		        	microflowImport.setMicroflowName(parts[1]);
		        	Module module = getCreateModule(parts[0]);
		        	microflowImport.setMicroflow_Module(module);
		        	return microflowImport.getMendixObject();
				})
				.collect(Collectors.toList());
			MicroflowSelection.setMicroflowSelection_Module(moduleList);
			return modelMicroflowList; 
		} catch (Exception e) {
		    LOGGER.error(e);
		    return null;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Microflow_GetList";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(Microflow_GetList.class);
	private List<Module> moduleList = new ArrayList<Module>();

	
	private Module getCreateModule(String moduleName) {
		Module moduleInList = moduleList.stream()
				.filter(o -> o.getModuleName().equals(moduleName))
				.findFirst()
				.orElse(null);
		
		if(moduleInList != null) {
			return moduleInList;
		}
		
		Module module = new Module(getContext());
		module.setModuleName(moduleName);
		moduleList.add(module);
		return module;
	}
	// END EXTRA CODE
}
