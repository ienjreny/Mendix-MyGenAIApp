// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package agentcommons.actions;

import static java.util.Objects.requireNonNull;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.UserAction;
import agentcommons.impl.AgentImpl;
import agentcommons.impl.MxLogger;
import agentcommons.proxies.ENUM_Agent_UsageType;
import agentcommons.proxies.PromptToUse;
import genaicommons.proxies.DeployedModel;
import genaicommons.proxies.ENUM_MessageRole;
import genaicommons.proxies.Request;
import genaicommons.proxies.Response;

/**
 * This action calls the Agent with the specified request. It executes a Chat Completions operation based on the defined Agent. All agent configurations, such as the selected model, system prompt, user prompt, tools, knowledge base or model parameter settings are used. 
 * If a request object is passed that already contains a system prompt, or a value for the parameters temperature, top P or max tokens, those values have priority and will not be overwritten by the agent configurations.
 * If a context object is passed, all variables are replaced in the system and user prompt. A response is returned that contains the final assistant's message.
 */
public class Agent_Call_WithoutHistory extends UserAction<IMendixObject>
{
	/** @deprecated use Agent.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __Agent;
	private final agentcommons.proxies.Agent Agent;
	private final IMendixObject OptionalContextObject;
	/** @deprecated use OptionalRequest.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __OptionalRequest;
	private final genaicommons.proxies.Request OptionalRequest;
	/** @deprecated use OptionalFileCollection.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __OptionalFileCollection;
	private final genaicommons.proxies.FileCollection OptionalFileCollection;

	public Agent_Call_WithoutHistory(
		IContext context,
		IMendixObject _agent,
		IMendixObject _optionalContextObject,
		IMendixObject _optionalRequest,
		IMendixObject _optionalFileCollection
	)
	{
		super(context);
		this.__Agent = _agent;
		this.Agent = _agent == null ? null : agentcommons.proxies.Agent.initialize(getContext(), _agent);
		this.OptionalContextObject = _optionalContextObject;
		this.__OptionalRequest = _optionalRequest;
		this.OptionalRequest = _optionalRequest == null ? null : genaicommons.proxies.Request.initialize(getContext(), _optionalRequest);
		this.__OptionalFileCollection = _optionalFileCollection;
		this.OptionalFileCollection = _optionalFileCollection == null ? null : genaicommons.proxies.FileCollection.initialize(getContext(), _optionalFileCollection);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		try{
			requireNonNull(Agent, "Agent is required.");
			if (Agent.getUsageType() != ENUM_Agent_UsageType.Single_Call)
				throw new IllegalArgumentException("The passed agent must be of usage type single call. Use Call Agent With History instead.");
			DeployedModel deployedModel = AgentImpl.getDeployedModel(Agent);
			requireNonNull(deployedModel, "Select a model on the agent version in use.");
			IMendixObject promptObject = Core.userActionCall("AgentCommons." + PromptToUse_GetAndReplace.class.getSimpleName())
					.withParams(Agent.getMendixObject(), OptionalContextObject)
					.execute(getContext());
			if (promptObject == null)
					return null;
			PromptToUse promptToUse = PromptToUse.initialize(getContext(), promptObject);
			Request request = genaicommons.proxies.microflows.Microflows.request_GetCreate(getContext(), OptionalRequest);
			agentcommons.proxies.microflows.Microflows.request_AddAgentCapabilities(getContext(), request, promptToUse);
			genaicommons.proxies.microflows.Microflows.request_AddMessage(getContext(), request, ENUM_MessageRole.user, OptionalFileCollection, promptToUse.getUserPrompt());
			Response response = genaicommons.proxies.microflows.Microflows.chatCompletions_WithHistory(getContext(), request, deployedModel);
			return response == null ? null : response.getMendixObject();
			
		} catch (Exception e) {
		    LOGGER.error(e);
		    return null;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Agent_Call_WithoutHistory";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(Agent_Call_WithoutHistory.class);
	// END EXTRA CODE
}
