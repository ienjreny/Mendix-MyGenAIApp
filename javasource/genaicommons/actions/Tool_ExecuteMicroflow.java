// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package genaicommons.actions;

import static java.util.Objects.requireNonNull;
import java.util.Date;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IDataType;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import genaicommons.impl.MxLogger;
import genaicommons.proxies.Argument;
import com.mendix.systemwideinterfaces.core.UserAction;
import com.mendix.systemwideinterfaces.core.meta.IMetaObject;

public class Tool_ExecuteMicroflow extends UserAction<java.lang.String>
{
	/** @deprecated use Tool.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __Tool;
	private final genaicommons.proxies.Tool Tool;
	/** @deprecated use Request.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __Request;
	private final genaicommons.proxies.Request Request;
	/** @deprecated use com.mendix.utils.ListUtils.map(ArgumentList, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __ArgumentList;
	private final java.util.List<genaicommons.proxies.Argument> ArgumentList;

	public Tool_ExecuteMicroflow(
		IContext context,
		IMendixObject _tool,
		IMendixObject _request,
		java.util.List<IMendixObject> _argumentList
	)
	{
		super(context);
		this.__Tool = _tool;
		this.Tool = _tool == null ? null : genaicommons.proxies.Tool.initialize(getContext(), _tool);
		this.__Request = _request;
		this.Request = _request == null ? null : genaicommons.proxies.Request.initialize(getContext(), _request);
		this.__ArgumentList = _argumentList;
		this.ArgumentList = java.util.Optional.ofNullable(_argumentList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(argumentListElement -> genaicommons.proxies.Argument.initialize(getContext(), argumentListElement))
			.collect(java.util.stream.Collectors.toList());
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {
			requireNonNull(Tool, "Tool is required.");
			requireNonNull(Tool.getMicroflow(), "Tool has no Microflow.");
			
			return executeToolMicroflow();
		
		} catch (Exception e) {
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Tool_ExecuteMicroflow";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new genaicommons.impl.MxLogger(Tool_ExecuteMicroflow.class);

	private String executeToolMicroflow() throws Exception {
		
		Map<String, Object> parametersAndValues = new java.util.HashMap<>();
		//Iterate over input params
		Map<String, IDataType> parametersAndTypes = Core.getInputParameters(Tool.getMicroflow());
		
		for(Map.Entry<String, IDataType> entry : parametersAndTypes.entrySet()) {
			IDataType value = entry.getValue();
			String key = entry.getKey();
			//find Argument.Value in ArgumentList
			String argumentValue = ArgumentList.stream()
				    .filter(arg -> key.equals(arg.getKey()))
				    .map(Argument::getValue)
				    .findFirst()
				    .orElse(null);
			
			//If there is no argumentValue, it is either a Mendix Object or nothing was passed
			if (argumentValue == null && isMetaObjectSubClass(value,genaicommons.proxies.Tool.getType())){
				parametersAndValues.put(key,  Tool.getMendixObject());
				continue;
				
			} else if (argumentValue == null && isMetaObjectSubClass(value, genaicommons.proxies.Request.getType())){
				parametersAndValues.put(key, Request.getMendixObject());
				continue;
				
			} else if (argumentValue == null) {
				parametersAndValues.put(key, null);
				continue;
			}
						
			// Convert input into type of tool microflow's parameter type and add to list
			if (IDataType.DataTypeEnum.Boolean.equals(value.getType())) {
				parametersAndValues.put(key, Boolean.parseBoolean(argumentValue));
				
			} else if (IDataType.DataTypeEnum.Integer.equals(value.getType()) || IDataType.DataTypeEnum.Long.equals(value.getType()) ) {
					parametersAndValues.put(key, Long.parseLong(argumentValue));
					
			} else if (IDataType.DataTypeEnum.Datetime.equals(value.getType())) {
				Date date = new Date(Long.parseLong(argumentValue) *1000L); //Convert UNIX timestamp to DateTime
				parametersAndValues.put(key, date);
				
			} else if (IDataType.DataTypeEnum.Decimal.equals(value.getType())) {
				parametersAndValues.put(key, Float.parseFloat(argumentValue));
				
			} else if(IDataType.DataTypeEnum.String.equals(value.getType())){
				parametersAndValues.put(key, argumentValue);	
				
			} else if(IDataType.DataTypeEnum.Enumeration.equals(value.getType())){
				parametersAndValues.put(key, argumentValue);	
				
			}
		}		
		return executeAndLogToolMicroflow(parametersAndValues);
	}
	
	/**
	 * Checks if the input object of a parameter (as IDataType) matches the (Sub)class of a given String type (should be passed using the class.getType() method)
	 * @param value
	 * @param type
	 * @return true if the Object matches the Sub(class).
	 */
	private Boolean isMetaObjectSubClass(IDataType value, String type) {
		String objectType = value.getObjectType();
		
		if(objectType == null) {
			return false;
		}
		
		IMetaObject metaObject = Core.getMetaObject(objectType);
		if (metaObject != null) {
			return metaObject.isSubClassOf(type);
		}
	
		return false;		
	}
	
	private String executeAndLogToolMicroflow(Map<String, Object> params) {
		String response;
		String logMessageInfo = "Finished calling microflow " + Tool.getMicroflow() + " with " + getContext();
		String logMessageTrace = logMessageInfo;
		long startTime = System.currentTimeMillis();
		if(params == null || params.isEmpty()) {
			logMessageTrace = logMessageTrace + "\nwithout input parameters ";
			response = Core.microflowCall(Tool.getMicroflow()).execute(getContext());
		} else {
			logMessageTrace = logMessageTrace +  "\n\nInput parameter(s): " + params.toString();
			response = Core.microflowCall(Tool.getMicroflow()).withParams(params).execute(getContext());
		}
		long endTime = System.currentTimeMillis();
		long executionTime = endTime - startTime;
		String duration = "\n\nDuration:\n" + executionTime + "ms";
		LOGGER.info(logMessageInfo + duration);
		LOGGER.trace(logMessageTrace+ "\n\nReturn value:\n" + response + duration);
		return response;
	}
	
	// END EXTRA CODE
}
