// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package myfirstmodule.actions;

import static java.util.Objects.requireNonNull;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.UserAction;
import genaicommons.actions.Request_AddFunction;
import genaicommons.impl.FunctionImpl;
import genaicommons.impl.MxLogger;
import genaicommons.impl.ToolCollectionImpl;
import genaicommons.proxies.ToolCollection;

public class JAVA_ACT_AddFunctionToRequest extends UserAction<IMendixObject>
{
	/** @deprecated use Request.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __Request;
	private final genaicommons.proxies.Request Request;
	private final java.lang.String ToolName;
	private final java.lang.String ToolDescription;
	private final java.lang.String FunctionMicroflow;

	public JAVA_ACT_AddFunctionToRequest(
		IContext context,
		IMendixObject _request,
		java.lang.String _toolName,
		java.lang.String _toolDescription,
		java.lang.String _functionMicroflow
	)
	{
		super(context);
		this.__Request = _request;
		this.Request = _request == null ? null : genaicommons.proxies.Request.initialize(getContext(), _request);
		this.ToolName = _toolName;
		this.ToolDescription = _toolDescription;
		this.FunctionMicroflow = _functionMicroflow;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		try{
			requireNonNull(Request, "Request is required.");
			FunctionImpl.validateFunctionInput(FunctionMicroflow, ToolName);
			
			ToolCollection toolCollection = ToolCollectionImpl.getOrCreateToolCollection(getContext(), Request);
			
			return FunctionImpl.createFunction(getContext(), FunctionMicroflow, ToolName, ToolDescription, toolCollection).getMendixObject();

		} catch (Exception e) {
			LOGGER.error(e);
			return null;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JAVA_ACT_AddFunctionToRequest";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new genaicommons.impl.MxLogger(Request_AddFunction.class);
	// END EXTRA CODE
}
